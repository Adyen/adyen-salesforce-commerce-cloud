<?xml version="1.0" encoding="UTF-8" ?>
<?demandware-pipeline version="2.0"?>

<pipeline group="Application">
  <description>This pipeline is called whenever a technical error occurs while processing a request. A standard error page will be shown.</description>
  <branch basename="_ANONYMOUS_BRANCH_1">
    <segment>
      <node>
        <text-node>
          <description>Called by the system when an error was not handled locally (general error page).

In:
PipelineName
ErrorText</description>
        </text-node>
        <node-display width="2" x="2" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="Start">
    <segment>
      <node>
        <start-node name="Start" secure="false"/>
        <node-display x="2" y="2"/>
      </node>
      <simple-transition/>
      <node>
        <decision-node condition-key="ErrorText == 'Secure connection required for this request.' &amp;&amp; !CurrentRequest.httpSecure &amp;&amp; (CurrentRequest.httpHeaders.containsKey(&quot;x-is-request_method&quot;)) &amp;&amp; (CurrentRequest.httpHeaders[&quot;x-is-request_method&quot;] == 'GET')" condition-operator="expr"/>
        <node-display orientation="horizontal" x="0" y="1"/>
        <branch basename="b2" source-connector="yes">
          <transition target-connector="in"/>
          <segment>
            <node>
              <pipelet-node custom-name="Set location to redirect" pipelet-name="Assign" pipelet-set-identifier="bc_api">
                <config-property key="Transactional" value="false"/>
                <key-binding alias="null" key="To_2"/>
                <key-binding alias="null" key="From_3"/>
                <key-binding alias="null" key="To_3"/>
                <key-binding alias="null" key="From_4"/>
                <key-binding alias="null" key="To_4"/>
                <key-binding alias="null" key="From_5"/>
                <key-binding alias="null" key="To_5"/>
                <key-binding alias="null" key="From_6"/>
                <key-binding alias="null" key="To_6"/>
                <key-binding alias="null" key="From_7"/>
                <key-binding alias="null" key="To_7"/>
                <key-binding alias="null" key="From_8"/>
                <key-binding alias="null" key="To_8"/>
                <key-binding alias="null" key="From_9"/>
                <key-binding alias="null" key="To_9"/>
                <key-binding alias="!empty(CurrentRequest.httpQueryString) ? ('?' + CurrentRequest.httpQueryString) : ''" key="From_0"/>
                <key-binding alias="'https://' + (CurrentRequest.httpHost || '') + (CurrentRequest.httpPath || '') +QueryString" key="From_1"/>
                <key-binding alias="Location" key="To_1"/>
                <key-binding alias="QueryString" key="To_0"/>
              </pipelet-node>
              <node-display orientation="horizontal" x="1" y="0"/>
            </node>
            <simple-transition>
              <transition-display>
                <bend-point relative-to="source" x="1" y="0"/>
              </transition-display>
            </simple-transition>
            <node>
              <interaction-node transaction-required="false">
                <template buffered="true" dynamic="false" name="util/redirect"/>
              </interaction-node>
              <node-display orientation="horizontal" x="1" y="0"/>
            </node>
          </segment>
        </branch>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <decision-node condition-key="CurrentRequest.getHttpHeaders().get(&quot;x-requested-with&quot;) != null &amp;&amp; CurrentRequest.getHttpHeaders().get(&quot;x-requested-with&quot;) === &quot;XMLHttpRequest&quot;" condition-operator="expr"/>
        <node-display x="0" y="1"/>
        <branch basename="b3" source-connector="yes">
          <transition target-connector="in">
            <transition-display>
              <bend-point relative-to="source" x="0" y="1"/>
            </transition-display>
          </transition>
          <segment>
            <node>
              <pipelet-node pipelet-name="Assign" pipelet-set-identifier="bc_api">
                <config-property key="Transactional" value="false"/>
                <key-binding alias="CurrentHttpParameterMap.format.stringValue || &quot;&quot;" key="From_0"/>
                <key-binding alias="format" key="To_0"/>
                <key-binding alias="true" key="From_1"/>
                <key-binding alias="nodecorator" key="To_1"/>
                <key-binding alias="null" key="From_2"/>
                <key-binding alias="null" key="To_2"/>
                <key-binding alias="null" key="From_3"/>
                <key-binding alias="null" key="To_3"/>
                <key-binding alias="null" key="From_4"/>
                <key-binding alias="null" key="To_4"/>
                <key-binding alias="null" key="From_5"/>
                <key-binding alias="null" key="To_5"/>
                <key-binding alias="null" key="From_6"/>
                <key-binding alias="null" key="To_6"/>
                <key-binding alias="null" key="From_7"/>
                <key-binding alias="null" key="To_7"/>
                <key-binding alias="null" key="From_8"/>
                <key-binding alias="null" key="To_8"/>
                <key-binding alias="null" key="From_9"/>
                <key-binding alias="null" key="To_9"/>
              </pipelet-node>
              <node-display x="0" y="1"/>
            </node>
            <simple-transition>
              <transition-display>
                <bend-point relative-to="target" x="0" y="-1"/>
              </transition-display>
            </simple-transition>
            <node>
              <decision-node condition-key="format === &quot;json&quot;" condition-operator="expr"/>
              <node-display x="0" y="2"/>
              <branch basename="b2" source-connector="yes">
                <transition target-connector="in">
                  <transition-display>
                    <bend-point relative-to="source" x="0" y="1"/>
                  </transition-display>
                </transition>
                <segment>
                  <node>
                    <interaction-node transaction-required="false">
                      <template buffered="true" dynamic="false" name="error/generalerrorjson"/>
                    </interaction-node>
                    <node-display x="0" y="1"/>
                  </node>
                </segment>
              </branch>
            </node>
            <transition target-connector="in1" target-path="../+1"/>
          </segment>
        </branch>
      </node>
      <transition target-connector="in1" target-path="./+1">
        <transition-display>
          <bend-point relative-to="source" x="2" y="0"/>
        </transition-display>
      </transition>
    </segment>
    <segment>
      <node>
        <join-node/>
        <node-display x="1" y="3"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <interaction-node transaction-required="false">
          <template buffered="true" dynamic="false" name="error/generalerror"/>
        </interaction-node>
        <node-display x="0" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="_ANONYMOUS_BRANCH_3">
    <segment>
      <node>
        <text-node>
          <description>Redirect to same URL through HTTPS protocol if only secure connection is needed</description>
        </text-node>
        <node-display x="1" y="3"/>
      </node>
    </segment>
  </branch>
  <branch basename="_ANONYMOUS_BRANCH_4">
    <segment>
      <node>
        <text-node>
          <description>Called by the system when a session hijacking was detected.</description>
        </text-node>
        <node-display x="5" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="Forbidden">
    <segment>
      <node>
        <start-node name="Forbidden" secure="false"/>
        <node-display x="5" y="2"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <pipelet-node pipelet-name="LogoutCustomer" pipelet-set-identifier="bc_api"/>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <interaction-node transaction-required="false">
          <template buffered="true" dynamic="false" name="error/forbidden"/>
        </interaction-node>
        <node-display x="0" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="_ANONYMOUS_BRANCH_6">
    <segment>
      <node>
        <text-node>
          <description>Determine if it was an ajax request by looking at X-Requested-With=XMLHttpRequest
request header.
this header is set by jQuery for every ajax request.
in case the requested response is not json then the decorator is empty. for json, a json response is sent</description>
        </text-node>
        <node-display height="2" x="1" y="4"/>
      </node>
    </segment>
  </branch>
  <branch basename="_ANONYMOUS_BRANCH_7">
    <segment>
      <node>
        <text-node>
          <description>the requested output format is json so the error response needs to be json</description>
        </text-node>
        <node-display x="1" y="7"/>
      </node>
    </segment>
  </branch>
</pipeline>
