/**
* JsonSerializer - Utility class to assist in generically serializing objects
**/
importPackage( dw.system );
importPackage( dw.object );

function JsonSerializer() : Object {}
/**
* JsonSerializer.getSimpleObject
* Gets simple object for a given object and args
*
* Parameters:
*
* o 	: Object - The object from which the simple object will be created
* args 	: Object - Optional arguments used for determining simple object structure and fields
*		  Accepted arguments are:
*		  objectName - top level object name
*		  includeFields - array of field names to include in json. all other fields will be excluded.
*		  excludeFields - array of field names to exclude from json. all other fields will be included.
**/ 
JsonSerializer.getSimpleObject  = function(o : Object, args : Object) : Object {	
	var ojson = {};	
	if (empty(o)) { return ojson; }
	
	var objectName = (args && args.objectName) ? args.objectName : null;
	var includeFields = (args && args.includeFields) ? args.includeFields : null;
	var excludeFields = (args && args.excludeFields) ? args.excludeFields : null;
	
	// if this is an extensible object, get the attributes
	if (o.describe) {
		var oDesc : ObjectTypeDefinition = o.describe();	
		var attDefs = oDesc.getAttributeDefinitions();
		
		// get attributes and values
		for (var i=0,len=attDefs.length;i<len;i++) {
			var oad  :  ObjectAttributeDefinition = attDefs[i];
			
			// if a list of fields to include is available and the id is not in the list,
			// OR a list of fields to exclude is available and the id is in the list, 
			// continue on to the next attribute definition		
			if ((!empty(includeFields) && includeFields.indexOf(oad.ID) < 0 ) || 
				(!empty(excludeFields) && excludeFields.indexOf(oad.ID)>=0)) { continue; }		
			
			// this is a custom attribute, but it is not found in the object's custom collection 
			// or it's value is empty, continue on to the next attribute definition
			if (!oad.isSystem() &&  (!(oad.ID in o.custom) || empty(o.custom[oad.ID]))) { continue; }
			
			// try creating property with value in serializable object						
			try {
				var val = null; 
				if (oad.isSystem()) {
					// get system attribute, if available
					val = ((oad.ID in o) && !empty(o[oad.ID])) ? (JsonSerializer.valueSet[oad.valueTypeCode.toString()](o[oad.ID])) : null;				 
				}
				else {
					// get custom attribute (will be available we've made it this far)
					val = JsonSerializer.valueSet[oad.valueTypeCode.toString()](o.custom[oad.ID]);				
				}
				// create the property and set the value
				ojson[oad.ID] = val;			
			} catch(e) {}  
		}
	}
	// get non-attribute properties
	for (var p in o) {
		try {
			if ((!empty(includeFields) && includeFields.indexOf(p) < 0 ) || 
				(!empty(excludeFields) && excludeFields.indexOf(p)>=0) ||
				typeof o[p]==="object" || 
				typeof o[p]==="function" || 
				typeof ojson[p]!=="undefined") { continue; }
			ojson[p] = o[p];			
		} catch(e){} 
	}
	// if objectName was passed in, set as to level object	
	if (!empty(objectName)) {
		var tempJson = {};
		tempJson[objectName] = ojson;		
		ojson = tempJson;		
	}
	return ojson;
};

/**
* JsonSerializer.getJson
* Gets a json string for a given object and args
*
* Parameters:
*
* o 	: Object - The object from which the json will be created
* args 	: Object - Optional arguments used for determining simple object structure and fields
*		  Accepted arguments are:
*		  objectName - top level object name
*		  includeFields - array of field names to include in json. all other fields will be excluded.
*		  excludeFields - array of field names to exclude from json. all other fields will be included.
**/ 
JsonSerializer.getJson = function(o : ExtensibleObject, args : Object) : String {
	var ojson = JsonSerializer.getSimpleObject(o, args);
	return JSON.stringify(ojson);
};

JsonSerializer.collectionToArray  = function(o : dw.util.Collection, args : Object) : Object {
	var list = [];
	
	return list;
}

// used to generically return value of an attribute
JsonSerializer.valueSet = [];
JsonSerializer.valueSet[dw.object.ObjectAttributeDefinition.VALUE_TYPE_STRING.toString()] = function(o) {return o;};
JsonSerializer.valueSet[dw.object.ObjectAttributeDefinition.VALUE_TYPE_INT.toString()] = function(o) {return o;};
JsonSerializer.valueSet[dw.object.ObjectAttributeDefinition.VALUE_TYPE_NUMBER.toString()] = function(o) {return o;};
JsonSerializer.valueSet[dw.object.ObjectAttributeDefinition.VALUE_TYPE_TEXT.toString()] = function(o) {return o.toString();};
JsonSerializer.valueSet[dw.object.ObjectAttributeDefinition.VALUE_TYPE_HTML.toString()] = function(o) {return o.toString();};
JsonSerializer.valueSet[dw.object.ObjectAttributeDefinition.VALUE_TYPE_DATE.toString()] = function(o) {return o;};
JsonSerializer.valueSet[dw.object.ObjectAttributeDefinition.VALUE_TYPE_DATETIME.toString()] = function(o) {return o;};
JsonSerializer.valueSet[dw.object.ObjectAttributeDefinition.VALUE_TYPE_IMAGE.toString()] = function(o) {return o;};
JsonSerializer.valueSet[dw.object.ObjectAttributeDefinition.VALUE_TYPE_EMAIL.toString()] = function(o) {return o.toString();};
JsonSerializer.valueSet[dw.object.ObjectAttributeDefinition.VALUE_TYPE_PASSWORD.toString()] = function(o) {return o;};
JsonSerializer.valueSet[dw.object.ObjectAttributeDefinition.VALUE_TYPE_BOOLEAN.toString()] = function(o) {return o;};
JsonSerializer.valueSet[dw.object.ObjectAttributeDefinition.VALUE_TYPE_MONEY.toString()] = function(o) {return o.valueOrNull;};
JsonSerializer.valueSet[dw.object.ObjectAttributeDefinition.VALUE_TYPE_QUANTITY.toString()] = function(o) {return (o) ? o.value : null;};
JsonSerializer.valueSet[dw.object.ObjectAttributeDefinition.VALUE_TYPE_SET_OF_STRING.toString()] = function(o) {return (o) ? o.toString() : null;};
JsonSerializer.valueSet[dw.object.ObjectAttributeDefinition.VALUE_TYPE_SET_OF_INT.toString()] = function(o) {return (o) ? o.toString() : null;};
JsonSerializer.valueSet[dw.object.ObjectAttributeDefinition.VALUE_TYPE_SET_OF_NUMBER.toString()] = function(o) {rreturn (o) ? o.toString() : null;};
JsonSerializer.valueSet[dw.object.ObjectAttributeDefinition.VALUE_TYPE_ENUM_OF_STRING.toString()] = function(o) {return (o) ? o.value : null;};
JsonSerializer.valueSet[dw.object.ObjectAttributeDefinition.VALUE_TYPE_ENUM_OF_INT.toString()] = function(o) {return (o) ? o.value : null;};