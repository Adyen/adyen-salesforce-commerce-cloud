/**
 * This script contains the custom logic for the product compare feature.
 * The implementation is bundled in a class "CompareList" which provides
 * methods access the compare data. The compare data itself is stored as
 * a JSON string in the privacy attributes of the session.
 */
importPackage( dw.catalog )
importPackage( dw.object );
importPackage( dw.system );
importPackage( dw.util );

/** Returns the product compare list, possibly restored using JSON data from the session. */
function GetProductCompareList()
{
	// Create the transient compare list
	var compareList = new CompareList();
	
	// If there is compare data stored in the session
	// restore the compare list with this data
	compareList.fromJSON(session.privacy['productComparison']);

	return compareList;
}

/** Constructs a new compare list. */
function CompareList()
{
	/** Copy of reference to this, for use in scopes where this refers to another object. */
	var that = this;
	
	/** The ID of the category currently being compared. */
	var currentCategoryID = null;
	
	/** Hash of category IDs to arrays of product IDs. */
	var categoryProducts = {};
	
	/** Returns the current category of products to compare. */
	this.getCategory = function() 
	{
		return currentCategoryID;
	};
	
	/**
	 * Returns a set of IDs of products being compared for the current category, 
	 * or the empty set if no category is selected.
	 */
	this.getProducts = function()
	{
		var products : LinkedHashSet = new LinkedHashSet();
	
		if (currentCategoryID != null) 
		{
			var categoryProductArray = categoryProducts[currentCategoryID];
			if (categoryProductArray) 
			{
				for (var i = 0; i < categoryProductArray.length; i++) 
				{
					products.add(categoryProductArray[i]);
				}
			}
		}
		
		return products;
	};
	
	/**
	 * Returns a map of category IDs to their names, for all categories 
	 * that have at least one product to compare.
	 */
	this.getCategories = function()
	{
		var categories : LinkedHashMap = new LinkedHashMap();
		
		for (categoryID in categoryProducts) 
		{
			var category : Category = CatalogMgr.getCategory(categoryID);
			if (category != null)
			{
				categories.put(categoryID, category.getDisplayName());
			}
		}
		
		return categories;
	};
	
	/** Returns a set of maps, each one representing an attribute group. */
	this.getAttributeGroups = function()
	{
		if (currentCategoryID == null) 
		{
			return new LinkedHashSet();
		}

		var categoryProductArray = categoryProducts[currentCategoryID];
		if (!categoryProductArray) 
		{
			return new LinkedHashSet();
		}
		
		// Create list of paths from root to classification category for products
		var paths : ArrayList = new ArrayList();
		for (var i = 0; i < categoryProductArray.length; i++) 
		{
			// get the product with this ID
			var p : Product = ProductMgr.getProduct(categoryProductArray[i]);
			if (p != null)
			{
				var category : Category = p.getClassificationCategory();
				
				var path : ArrayList = new ArrayList();
				while (category != null) 
				{
					path.addAt(0, category);
					category = category.getParent();
				}
				
				paths.add(path);
			}
		}
		
		return findAttributeGroups(findDeepestCommonCategory(paths));
	};
	
	/**
	 * Returns the deepest common category among the given list of paths starting at the root.
	 * @param paths : ArrayList list of paths from root to category
	 */
	function findDeepestCommonCategory(paths : ArrayList)
	{
		// No common category if no paths
		if ((paths == null) || paths.isEmpty()) 
		{
			return null;
		}

		// Assume no common category
		var deepestCommonCategory : Category = null;
		
		// Compare the first path to the others
		var comparePath : ArrayList = paths.get(0);
		for (var i = 0; i < comparePath.size(); i++)
		{
			// Get category at level i in first path
			var compareCategory : Category = comparePath.get(i);
			if (compareCategory == null) 
			{
				return deepestCommonCategory;
			}
			
			// Compare category to level i categories in other paths
			for (var j = 1; j < paths.size(); j++) 
			{
				var otherPath : ArrayList = paths.get(j);
				
				// Quit if other path is shorter
				if (i >= otherPath.size()) 
				{
					return deepestCommonCategory;
				}
				
				// Quit if other path has different category at level i
				var otherCategory : Category = otherPath.get(i);
				if ((otherCategory == null) || (otherCategory.getID() != compareCategory.getID()))
				{
					return deepestCommonCategory;
				}
			}
			
			// Update deepest common category among paths
			deepestCommonCategory = compareCategory;
		}
		
		return deepestCommonCategory;
	};

	/**
	 * Returns the set of attribute groups for the given classification category,
	 * each one represented as a map.
	 * @param classificationCategory : Category the classification category
	 */
	function findAttributeGroups(classificationCategory : Category)
	{
		// Get product attribute model
		var model : ProductAttributeModel; 
		if (classificationCategory == null)
		{
			model = new ProductAttributeModel();
		}
		else
		{
			model = classificationCategory.getProductAttributeModel();
		}
			
		// Get attribute groups for attribute model
		var persistentAttributeGroups : Iterator = model.getVisibleAttributeGroups().iterator();
		
		var attributeGroups : LinkedHashSet = new LinkedHashSet();
		while (persistentAttributeGroups.hasNext())
		{
			var persistentAttributeGroup : ObjectAttributeGroup = persistentAttributeGroups.next();
			var persistentAttributeDescriptors : Iterator = model.getVisibleAttributeDefinitions(persistentAttributeGroup).iterator();

			// Create attributes in group
			var groupAttributes : ArrayList = new ArrayList();
			while (persistentAttributeDescriptors.hasNext())
			{
				var persistentAttributeDescription : ObjectAttributeDefinition = persistentAttributeDescriptors.next();
				var attributeDesc : HashMap = new HashMap();
				
				attributeDesc.put('descriptor', persistentAttributeDescription);
				attributeDesc.put('displayName', persistentAttributeDescription.getDisplayName());
			
				groupAttributes.add(attributeDesc);
			}

			// Create attribute group
			var attributeGroup : HashMap = new HashMap();
			attributeGroup.put('descriptor', persistentAttributeGroup);
			attributeGroup.put('displayName', persistentAttributeGroup.getDisplayName());
			attributeGroup.put('attributes', groupAttributes);

			attributeGroups.add(attributeGroup);
		}
		
		return attributeGroups;
	};
	
	/** Stores a representation of this product comparison in the session. */
	function store()
	{
		session.privacy['productComparison'] = toJSON();
	}
	
	/** Returns a string representation of this compare list, typically to put in the session. */
	function toJSON()
	{
		var o = {
			cid: (currentCategoryID ? currentCategoryID : null),
			prods: categoryProducts			
		}
		return JSON.stringify(o);
	};

	/** 
	 * Sets the state of this compare list based on the given string, typically from the session.
	 * @param json : String JSON data 
	 */
	this.fromJSON = function(json : String)
	{
		if (!json)
		{
			return;
		}
		
		try
		{
			var data = JSON.parse(json);
			currentCategoryID = data.cid ? data.cid : null;
			categoryProducts = data.prods ? data.prods : {};
		}
		catch (e)
		{
			Logger.error(e);			
		}
	};

	/**
	 * Sets the current category of products to compare to the one with the given ID.
	 * @param categoryID : String category ID 
	 */
	this.setCategory = function(categoryID : String)
	{
		currentCategoryID = categoryID;
		copyParentCategory();
		
		store();
	}

	/**
 	 * Adds a product to the set of compared products for the given category.
	 * @param p : Product the product to add
	 * @param c : Category the category for which to add the object
	 */
	this.add = function(p : Product, c : Category)
	{
		var products = categoryProducts[c.getID()];
		
		// Create set if necessary
		if (!products)
		{
			products = [];
			categoryProducts[c.getID()] = products;
		}

		// Check if product is already in set
		var found = false;
		for (var i = 0; i < products.length; i++)
		{
			found |= (products[i] === p.getID());
		}
		
		// Add the product if it is not
		if (!found) 
		{
			products.push(p.getID());
		}
		
		store();
	};

	/**
	 * Copies to the current category the applicable compare products of the parent category, 
	 * if there are no products to compare for the current category.
	 */
	function copyParentCategory()
	{
		// Quit if no category set
		if (currentCategoryID == null)
		{
			return;
		}
		
		// Quit if the category already has products
		if (categoryProducts[currentCategoryID]) 
		{
			return;
		}
		
		// Get the category
		var category : Category = CatalogMgr.getCategory(currentCategoryID);
		if (category == null) 
		{
			return;
		}

		// Get the parent category
		var parent : Category = category.getParent();
		if (parent == null) 
		{
			return;
		}
		
		// Get product IDs for parent category
		var products = categoryProducts[parent.getID()];
		if (!products)
		{
			return;
		}
		
		// Add products from parent category also assigned to the category  
		for (var i = 0; i < products.length; i++) 
		{	
			var product : Product = ProductMgr.getProduct(products[i]);			
			if ((product != null) && productAssignedToCategory(product, category)) 
			{
				that.add(product, category);
			}
		}
	};

	/**
	 * Returns true if the product is assigned to the given category or one of its children,
	 * or false if it is not.
	 * @param p : Product product
	 * @param c : Category category
	 */
	function productAssignedToCategory(p : Product, c : Category) 
	{
		var assignments : Collection = p.getCategoryAssignments();
		for (var it : Iterator = assignments.iterator(); it.hasNext(); ) 
		{
			var assignment : CategoryAssignment = it.next();
			
			var assignedCategory : Category = assignment.getCategory();
			while (assignedCategory != null) 
			{
				if (assignedCategory.getID() == c.getID())
				{
					return true;
				}
				
				assignedCategory = assignedCategory.getParent();
			} 
		}
		
		return false;
	};

	/**
	 * Removes the given product from the set of compared products for the given category.
	 * @param p : Product the product to remove
	 * @param c : Category the category for which to add the object
	 */
	this.remove = function(p : Product, c : Category)
	{
		var products = categoryProducts[c.getID()];
		
		// Quit if no products for category
		if (!products)
		{
			return;
		}
		
		// Build copy of products array without product
		var newProducts = [];
		for (var i = 0; i < products.length; i++)
		{
			if (products[i] !== p.getID())
			{
				newProducts.push(products[i]);
			}
		}
		
		// Remove category if last product was removed
		if (newProducts.length == 0)
		{
			delete categoryProducts[c.getID()];
		}
		
		// Otherwise set updated products array for category
		else
		{
			categoryProducts[c.getID()] = newProducts;
		}

		// Remove the product from subcategories of the category
		for (var it : Iterator = c.getSubCategories().iterator(); it.hasNext(); )
		{
			this.remove(p, it.next());
		}
		
		store();
	};
}
