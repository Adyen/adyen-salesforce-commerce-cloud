/**
 * This script sets the shipping method of the given shipment to
 * the passed method.  The list of allowed shipping methods may be
 * passed in as a parameter.  If not, then it is retrieved using
 * ShipmentShippingModel.getApplicableShippingMetods().
 * If the passed shipping method is not
 * in this list, then the script uses the default shipping method.
 * If the default shipping method is not in the list, the script
 * uses the first method in the list.
 * 
 * @input Shipment: dw.order.Shipment The shipment to update the shipping method for.
 * @input ShippingMethods : dw.util.Collection The list of applicable shipping methods.
 * @input ShippingMethodID : String The ID of the shipping method to set for the shipment.
 * @input ShippingMethod : dw.order.ShippingMethod The shipping method to set for the shipment.
 */
importPackage( dw.customer );
importPackage( dw.order );
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.web );

function execute( pdict : PipelineDictionary ) : Number
{
	var shipment : dw.order.Shipment = pdict.Shipment;
	var shippingMethodID : String = pdict.ShippingMethodID;
	var shippingMethod : dw.order.ShippingMethod = pdict.ShippingMethod;
	
	// Determine the list of applicable shipping methods.
	var shippingMethods : Collection = pdict.ShippingMethods;
	if (shippingMethods == null)
	{
		shippingMethods = ShippingMgr.getShipmentShippingModel(shipment).getApplicableShippingMethods();
	}

	// 1) Try to set the shipment shipping method to the passed one.
	var shippingMethodsIter : Iterator = shippingMethods.iterator();
	while( shippingMethodsIter.hasNext() )
	{
		var method : ShippingMethod = shippingMethodsIter.next();
		if (shippingMethod == null)
		{
			if( !method.ID.equals( shippingMethodID ) ) continue;
		}
		else
		{
			if( method != shippingMethod ) continue;
		}
		
		// set this shipping method
		shipment.setShippingMethod( method );
		return PIPELET_NEXT;
	}
	
	var defaultShippingMethod = ShippingMgr.getDefaultShippingMethod();
	if (shippingMethods.contains(defaultShippingMethod))
	{
		// 2) Set the default shipping method if it is applicable.
		shipment.setShippingMethod( defaultShippingMethod );
	}
	else if (shippingMethods.length > 0)
	{
		// 3) Set the first shipping method in the applicable list.
		shipment.setShippingMethod(shippingMethods.iterator().next());
	}
	else
	{
		// 4) Invalidate the current shipping method selection.
		shipment.setShippingMethod(null);
	}

	return PIPELET_NEXT;
}