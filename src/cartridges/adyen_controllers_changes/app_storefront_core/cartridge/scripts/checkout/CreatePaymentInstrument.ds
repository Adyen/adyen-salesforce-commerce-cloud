/**
 * Creates a payment instrument specific for the given payment type (payment method)
 * for the given basket. If any error occurs the pipelet returns PIPELET_ERROR with
 * no payment instrument being created. If the creation succeeded the script returns 
 * the newly created payment instrument.
 *
 * If only one payment instrument is allowed, any existing payment instrument may be
 * removed by using the RemoveExisting input parameter and passing a Boolean true.
 *
 * PJP-2000: Modified logic to reference LineItemCtnr (to work for both Order and Basket)
 *
 * @input LineItemCtnr : dw.order.LineItemCtnr The basket.
 * @input PaymentType : String the payment method of the payment instrument to create.
 * @input RemoveExisting : Boolean if true, removes any other payment instruments of the same payment method
 * @output PaymentInstrument : dw.order.PaymentInstrument The created payment instrument.
 */
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.util );
importPackage( dw.value );
importPackage( dw.web );

importScript("checkout/Utils.ds");

function execute( pdict : PipelineDictionary ) : Number
{
    var lineItemCtnr : LineItemCtnr = pdict.LineItemCtnr;
	var paymentType : String = pdict.PaymentType;
	var removeExisting : Boolean = pdict.RemoveExisting;

	// validate pipelet input parameters
	if( lineItemCtnr == null || paymentType == null || removeExisting == null)
	{
		return PIPELET_ERROR;
	}

	// remove existing payment instruments from the basket
	if (removeExisting)
	{
		removeExistingPaymentInstruments( lineItemCtnr,  paymentType );
	}

	// calculate the amount to be reflected by this payment instrument
	var amount = calculateNonGiftCertificateAmount( lineItemCtnr );

	// create a payment instrument
	var paymentInstr : PaymentInstrument = lineItemCtnr.createPaymentInstrument( paymentType, amount );

	pdict.PaymentInstrument = paymentInstr;
    return PIPELET_NEXT;
}