// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Place Order should complete if viewData contains csrfError 1`] = `
Array [
  Array [
    "route:Complete",
    Object {
      "currentCustomer": Object {
        "addressBook": true,
      },
      "locale": Object {
        "id": "NL",
      },
      "session": Object {
        "privacyCache": Object {
          "get": [MockFunction],
          "set": [MockFunction],
        },
      },
    },
    Object {
      "getViewData": [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Object {
              "csrfError": true,
            },
          },
        ],
      },
      "json": [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    },
  ],
]
`;

exports[`Place Order should fail if billing address is empty 1`] = `
Array [
  Array [
    Object {
      "error": true,
      "errorMessage": "mocked_error.no.billing.address",
      "errorStage": Object {
        "stage": "payment",
        "step": "billingAddress",
      },
    },
  ],
]
`;

exports[`Place Order should fail if calculated payment total has error 1`] = `
Array [
  Array [
    Object {
      "error": true,
      "errorMessage": "mocked_error.technical",
    },
  ],
]
`;

exports[`Place Order should fail if created order is empty 1`] = `
Array [
  Array [
    Object {
      "error": true,
      "errorMessage": "mocked_error.technical",
    },
  ],
]
`;

exports[`Place Order should fail if fraudDetection status returns "fail" 1`] = `
Array [
  Array [
    Object {
      "cartError": true,
      "error": true,
      "errorMessage": "mocked_error.technical",
      "redirectUrl": "[\\"Error-ErrorCode\\",\\"err\\",\\"mocked_fraud_fail\\"]",
    },
  ],
]
`;

exports[`Place Order should fail if order validation status is error 1`] = `
Array [
  Array [
    Object {
      "error": true,
      "errorMessage": "mocked_order_validation_message",
    },
  ],
]
`;

exports[`Place Order should fail if placeOrder has error 1`] = `
Array [
  Array [
    Object {
      "error": true,
      "errorMessage": "mocked_error.technical",
    },
  ],
]
`;

exports[`Place Order should fail if shipping address is empty 1`] = `
Array [
  Array [
    Object {
      "error": true,
      "errorMessage": "mocked_error.no.shipping.address",
      "errorStage": Object {
        "stage": "shipping",
        "step": "address",
      },
    },
  ],
]
`;

exports[`Place Order should fail if there is error on payment handle 1`] = `
Array [
  Array [
    Object {
      "error": true,
      "errorMessage": "mocked_error.payment.not.valid",
    },
  ],
]
`;

exports[`Place Order should handle threeDS2 1`] = `
Array [
  Array [
    Object {
      "continueUrl": "[\\"Adyen-Adyen3DS2\\",\\"resultCode\\",\\"mocked_threeDS2_resultCode\\",\\"orderNo\\",\\"mocked_orderNo\\"]",
      "error": false,
      "order": Object {
        "getPaymentInstruments": [MockFunction] {
          "calls": Array [
            Array [
              "mocked_method",
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Object {
                "0": Object {
                  "custom": Object {
                    "adyenAction": "mocked_action",
                    "adyenMD": "mocked_adyen_MD",
                    "adyenPaymentData": "mocked_adyen_payment_data",
                    "adyenRedirectURL": "https://some_mocked_url/signature",
                  },
                },
                "iterator": [Function],
                "toArray": [MockFunction] {
                  "calls": Array [
                    Array [],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": Array [
                        Object {
                          "custom": Object {
                            "adyenAction": "mocked_action",
                            "adyenMD": "mocked_adyen_MD",
                            "adyenPaymentData": "mocked_adyen_payment_data",
                            "adyenRedirectURL": "https://some_mocked_url/signature",
                          },
                        },
                      ],
                    },
                  ],
                },
              },
            },
          ],
        },
        "orderNo": "mocked_orderNo",
        "orderToken": "mocked_orderToken",
      },
    },
  ],
]
`;

exports[`Place Order should redirect with authorize3d 1`] = `
Array [
  Array [
    Object {
      "continueUrl": "[\\"Adyen-Adyen3D\\",\\"IssuerURL\\",\\"mocked_url\\",\\"PaRequest\\",\\"mocked_PaReq\\",\\"MD\\",\\"mocked_MD\\",\\"merchantReference\\",\\"mocked_orderNo\\",\\"signature\\",null]",
      "error": false,
    },
  ],
]
`;

exports[`Place Order should redirect without authorize3d 1`] = `
Array [
  Array [
    Object {
      "continueUrl": "[\\"Adyen-Redirect\\",\\"merchantReference\\",\\"mocked_orderNo\\",\\"signature\\",null]",
      "error": false,
    },
  ],
]
`;

exports[`Place Order should return error if privacy cache detect fraud 1`] = `
Array [
  Array [
    Object {
      "cartError": true,
      "error": true,
      "errorMessage": "mocked_error.technical",
      "redirectUrl": "[\\"Error-ErrorCode\\",\\"err\\",\\"01\\"]",
    },
  ],
]
`;

exports[`Place Order should return error when basket is empty 1`] = `
Array [
  Array [
    Object {
      "cartError": true,
      "error": true,
      "fieldErrors": Array [],
      "redirectUrl": "[\\"Cart-Show\\"]",
      "serverErrors": Array [],
    },
  ],
]
`;

exports[`Place Order should return json response 1`] = `
Array [
  Array [
    Object {
      "continueUrl": "[\\"Order-Confirm\\"]",
      "error": false,
      "orderID": "mocked_orderNo",
      "orderToken": "mocked_orderToken",
    },
  ],
]
`;
