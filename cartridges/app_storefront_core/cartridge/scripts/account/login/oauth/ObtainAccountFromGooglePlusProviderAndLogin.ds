/**
 * @input OAuthProviderID : String
 * @input ResponseText : String
 */
importPackage( dw.system );
importPackage( dw.net );
importPackage( dw.util );
importPackage( dw.customer );

function execute( pdict : PipelineDictionary ) : Number
{
	var THIS_SCRIPT : String = 'ObtainAccountFromGooglePlusProviderAndLogin.ds, pdict.OAuthProviderID:' + pdict.OAuthProviderID + ": ";
	if (null == pdict.OAuthProviderID) {
		Logger.warn(THIS_SCRIPT + "exiting because the provider id is null.");
		return PIPELET_ERROR;	
	}
	Logger.debug(THIS_SCRIPT + "pdict.ResponseText: " + pdict.ResponseText);
	if (null!=pdict.ResponseText) {
		//wheather to drop the rememberMe cookie (preserved in the session before InitiateOAuthLogin pipelet)
		var rememberMe : Boolean = session.custom['RememberMe'];
		delete session.custom['RememberMe'];

		var extProfile : Object = JSON.parse(pdict.ResponseText);
		if (null == extProfile) {
			Logger.warn(THIS_SCRIPT + ": extProfile could not be extracted from the response:" + pdict.ResponseText);
			return PIPELET_ERROR;
		}
		var userId : String = extProfile['id']; 
		if (!userId) {
			Logger.warn(THIS_SCRIPT + "Undefined user identifier - make sure you are mapping the correct property from the response."
				+ " We are mapping 'id' which is not available in the response: " + extProfile);
			return PIPELET_ERROR;
		}
		Logger.debug(THIS_SCRIPT + ": Parsed UserId from response: "+userId);
		var profile : Profile = CustomerMgr.getExternallyAuthenticatedCustomerProfile(pdict.OAuthProviderID, userId);
		var customer : Customer;	

		if (profile == null)
		{
			Logger.debug(THIS_SCRIPT + ": User id: "+userId+" not found in the DB, creating a new profile.");
			customer = CustomerMgr.createExternallyAuthenticatedCustomer(pdict.OAuthProviderID, userId);
			profile = customer.getProfile();
			
			// vvvvvvvvv Custom JSON parsing part starts here: vvvvvvvvv
			if (extProfile['name']) {
				profile.setFirstName(extProfile['name']['givenName']);
				profile.setLastName(extProfile['name']['familyName']);
			}
			var emails : Array = extProfile['emails'];
			if (emails && 0 < emails.length) {
				//first element of the array would be the account email according to Google:
				profile.setEmail(extProfile['emails'][0]['value']);
			}
			// ^^^^^^^^^^^ Custom parsing part ends here ^^^^^^^^^^^
		} else {
			customer = profile.getCustomer();
		}
		var credentials : Credentials = profile.getCredentials();
		if (credentials.isEnabled()) {
			CustomerMgr.loginExternallyAuthenticatedCustomer(pdict.OAuthProviderID, userId, rememberMe);
			Logger.debug(THIS_SCRIPT + "Logged in external customer with id:" + userId);
		} else {
			Logger.warn(THIS_SCRIPT + "Customer attempting to login into a disabled profile: "
				+ profile.getCustomer().getCustomerNo() + " with id:" + userId);
			return PIPELET_ERROR;
		}

		return PIPELET_NEXT;
	} else {
		Logger.warn(THIS_SCRIPT + "Response from provider is empty");
		return PIPELET_ERROR;
	} 
}