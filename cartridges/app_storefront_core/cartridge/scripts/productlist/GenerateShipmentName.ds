/**
* This script generates a shipment name for a shipment representing 
* a product list. Generally, a product list of type 'Gift Registry' is 
* given a name when the registry is created. However, a product list of 
* type 'Wish List' is not always given a name. Furthermore, there may 
* be more than one product list with the same name, but that actually 
* represents two different owners. For example, you could have  
* two different gift registries titled 'My Wedding'. 
* To generate a name, this script uses the list name first, then the 
* list name and the owner's name if there is already a shipment using that 
* name, and finally the owner's name and the type of the product list 
* if the product list does not have a name. This script also assigns 
* the ID back to the list as its name if the list does not have a name.
*
*
* @input ProductList : dw.customer.ProductList The product list.
* @input Basket : dw.order.Basket The basket.
* @output ShipmentID : String The shipment identifier.
*   
*/
importPackage( dw.system );
importPackage( dw.customer );
importPackage( dw.order );
importPackage( dw.util );
importPackage( dw.web );

function execute( pdict : PipelineDictionary ) : Number
{    
    // read pipeline dictionary input parameter
    var productList : ProductList = pdict.ProductList;
    var basket : Basket = pdict.Basket;
    var owner : Customer = productList.getOwner();
    var ownerName : String = owner.getProfile().getFirstName() + ' ' + owner.getProfile().getLastName();        
    var shipmentID : String = null;
    
 	// see if the list has a name
 	var listName : String = productList.getName();
 	if (listName != null) 
 	{
 		// get the registrant
 		var registrant : ProductListRegistrant = productList.getRegistrant();
 		var registrantName : String = "";
 		var targetShipmentID : String = listName;
 		if (registrant != null)
 		{
 			registrantName = " (" + registrant.getFirstName() + " " + registrant.getLastName() + ")";
 			targetShipmentID = listName + registrantName;
 		}
 		 		
 		// see if we already have a shipment with 
 		// this name
 		var shipment : Shipment = basket.getShipment(targetShipmentID);
 		var shipmentProductList : ProductList = null;
 		if (shipment == null)
 		{
 			shipmentID = targetShipmentID;
 		}
 		else
 		{
			// a shipment by this name already exists.
 			// make sure the shipment represents the same 
 			// product list. if not, generate new name.
 			shipmentProductList = fetchProductList(shipment);
 			 			
 			// now see if the existing product list and current product list
 			// are the same. if so, simply return name
 			if (shipmentProductList != null && shipmentProductList.getID() == productList.getID())
 			{
 				shipmentID = targetShipmentID;
 			}
 			else
 			{
 				// we have two separate product lists with the same name.
 				// generate the shipping name using the owner name
 				shipmentID = listName + registrantName;
 			}
 		}
 	}  		
 	else 
 	{
 		// generate the name based on type
  		var messageKey : String = "";
  
    	// now fetch the message, if an error occurs use the owner name
    	shipmentID = ownerName;
    	try 
    	{    		
      		// based on type, create the shipment ID
    		if (productList.getType() == ProductList.TYPE_WISH_LIST)
    		{	
    			shipmentID = Resource.msgf("type.wishlist", "wishlist", "", ownerName);
    		}	
    		else if (productList.getType() == ProductList.TYPE_GIFT_REGISTRY)
    		{
    			shipmentID = Resource.msgf("account.giftregistry.owner", "account", "", ownerName);
    		}
    			    
	    	// use it for the name of the list
    		productList.setName(shipmentID);    		
    	} 
    	catch (error)
    	{
   			trace("shipment id error");
    		shipmentID = ownerName;
    	}
	}
	
    // write pipeline dictionary output parameter
    pdict.ShipmentID = shipmentID;

    return PIPELET_NEXT;
}

/**
* Returns the product list associated with the shipment's 
* product line items or gift certificatte line items. This 
* function can return null.
*/
function fetchProductList(shipment : Shipment) : ProductList
{
 	var collection : Collection = shipment.getProductLineItems();
	var productList : ProductList = null;
 	var iter: Iterator  = collection.iterator();
 	while (iter != null && iter.hasNext())
 	{
 		var pli : ProductLineItem = iter.next();
 		var productListItem : ProductListItem = pli.getProductListItem();
 		if (productListItem != null && productList == null) 
 		{
 			productList = productListItem.getList();
 		}
 	}
 	
 	if (productList != null)
 	{
 		return productList;
 	}

	// see if the shipment contains GC items
	collection = shipment.getGiftCertificateLineItems();
	iter = collection.iterator();
 	while (iter != null && iter.hasNext())
 	{
 		var gcli : GiftCertificateLineItem = iter.next();
 		var productListItem : ProductListItem = gcli.getProductListItem();
 		if (productListItem != null && productList == null) 
 		{
 			productList = productListItem.getList();
 		}
 	}
	

	return productList;
}
