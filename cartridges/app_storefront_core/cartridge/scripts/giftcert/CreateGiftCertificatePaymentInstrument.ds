/**
* Creates a Gift Certificate payment instrument. This script requires a Basket and a Gift Certificate ID as 
* input parameters and an optional Amount to be redeemed from the Gift Certificate. If the Amount is not 
* specified, this script returns Pipelet.ERROR, but it sets the suggested Amount for the Gift Certificate 
* and the current balance on the Gift Certificate. 
*
*   @input Basket : dw.order.Basket The basket.
*   @input GiftCertificateID: Object The Gift Certificate ID.
*   @input Amount : Object The amount of the Gift Certificate to assign to the Payment Instrument.
*   @output Status : dw.system.Status A status object indicating the success or failure of operation.
*   @output PaymentInstrument : dw.order.PaymentInstrument The created Payment instrument.
*   @output GiftCertificateAmount : Number The suggested value for the Gift Certificate based on the amount of the order and remaining balance.
*   @output GiftCertificateBalance : Number The balance on the Gift Certificate.
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.value );
importPackage( dw.util );

function execute( pdict : PipelineDictionary ) : Number
{
    // read pipeline dictionary input parameters
    var basket : Basket = pdict.Basket;
	var giftCertID : Object = pdict.GiftCertificateID;
	var amount : Object = pdict.Amount;

	// fetch the gift cert
	var gc : GiftCertificate = GiftCertificateMgr.getGiftCertificateByCode(giftCertID);
	if (gc == null) {
		pdict.Status = new Status(Status.ERROR, GiftCertificateStatusCodes.GIFTCERTIFICATE_NOT_FOUND );
		return PIPELET_ERROR;	
	}
	
	// make sure it is enabled
	if (!gc.isEnabled()) {
		pdict.Status = new Status(Status.ERROR, GiftCertificateStatusCodes.GIFTCERTIFICATE_DISABLED);
		return PIPELET_ERROR;			
	}
	
	// make sure its status is OK
	if (gc.getStatus() == GiftCertificate.STATUS_PENDING)
	{
		pdict.Status = new Status(Status.ERROR, GiftCertificateStatusCodes.GIFTCERTIFICATE_PENDING);
		return PIPELET_ERROR;					
	} 

	if (gc.getStatus() == GiftCertificate.STATUS_REDEEMED)
	{
		pdict.Status = new Status(Status.ERROR, GiftCertificateStatusCodes.GIFTCERTIFICATE_REDEEMED);
		return PIPELET_ERROR;	
	} 
	
	// fetch the balance 
	var balance : Money = gc.getBalance();
	var orderTotal : Money = basket.getTotalGrossPrice();
	
	// If they didn't enter an amount, return and 
	// set GiftCertificateAmount to the order total
	// or balance.
	if (amount == null) {
		if (balance.getValue() < orderTotal.getValue()) {
			pdict.GiftCertificateAmount = balance.getValue();
		} 
		else {
			pdict.GiftCertificateAmount = orderTotal.getValue();
		}
		
		pdict.Status = new Status(Status.ERROR, "AMOUNT_REQUIRED");
		return PIPELET_ERROR;
	} 
	else if (amount <= 0.0) {
		pdict.Status = new Status(Status.ERROR, "INVALID_AMOUNT");
		return PIPELET_ERROR;
	}
	

	if (balance.getValue() < amount) {
		pdict.GiftCertificateAmount = balance.getValue();
		pdict.GiftCertificateBalance = balance.getValue();
		var args : Array = new Array();
		args[0] = balance.toNumberString();
		pdict.Status = new Status(Status.ERROR, GiftCertificateStatusCodes.GIFTCERTIFICATE_INSUFFICIENT_BALANCE,
								"",	args);
		return PIPELET_ERROR;
	} 
	
	// make sure the GC is in the right currency
    if( !(balance.currencyCode == basket.currencyCode ))
    {
        pdict.Status = new Status(Status.ERROR, GiftCertificateStatusCodes.GIFTCERTIFICATE_WRONG_CURRENCY);
        return PIPELET_ERROR;
    }
			
	// remove any duplicates
	removeDuplicates(basket, giftCertID);
	
	// Because there may be multiple gift certificates, we 
	// adjust the amount being applied to the current 
	// gift certificate based on the order total minus 
	// the aggregate amount of the current gift certificates.
	var gcAmount = calculateAmount(new Money(amount, basket.currencyCode), 
									orderTotal, basket);

	var pi : PaymentInstrument = basket.createGiftCertificatePaymentInstrument(giftCertID, gcAmount);
	pdict.PaymentInstrument = pi;
	
	// OK
	pdict.Status = new Status(Status.OK);
	
    return PIPELET_NEXT;
}

/**
Calculates the amount to use for this Gift Certificate 
redemption by subtracting the amount of all of other 
Gift Certificates from the order total.
*/
function calculateAmount(amount : Money, orderTotal : Money, basket : Basket) 
{

	var gcTotal : Money = new Money(0.0, basket.currencyCode); 

	// iterate over the list of payment instruments 
	// and fetch amount
	var giftCerts : Collection = 
			basket.getGiftCertificatePaymentInstruments();
	var existingPi : OrderPaymentInstrument = null;
	var iter : Iterator = giftCerts.iterator();

	while (iter.hasNext()) {
		existingPi = iter.next();
		gcTotal = gcTotal.add(existingPi.getPaymentTransaction().getAmount());
	}
	
	// calculate the balance and determine return result
	var orderBalance : Money = orderTotal.subtract(gcTotal);

	if (orderBalance > amount) {
		// return the specified amount
		return amount;
	} else if (orderBalance < amount) {
		// return the balance
		return orderBalance;
	} else {
		// equal, return amount
		return amount;
	}
}


/** 
Determines if the basket already contains a Gift Certificate 
payment instrument representing the ID. If so, removes 
the existing payment instrument from the basket.
*/
function removeDuplicates(basket : Basket, giftCertID : Object)
{
	// iterate over the list of payment instruments 
	// to see if the Gift Certificate is already 
	// being used as a payment instrument. If it 
	// is, remove it since we do not want duplicates.
	var giftCerts : Collection = 
			basket.getGiftCertificatePaymentInstruments(giftCertID);
	var existingPi : OrderPaymentInstrument = null;
	var iter : Iterator = giftCerts.iterator();
	while (iter.hasNext()) {
		existingPi = iter.next();
		basket.removePaymentInstrument(existingPi);
	}
}
