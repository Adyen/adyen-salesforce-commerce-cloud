/**
 *
 */
var dwsvc = require("dw/svc");
var dwnet = require("dw/net");
var dwsystem = require("dw/system");
var dwutil = require("dw/util");
var adyenCurrentSite = dwsystem.Site.getCurrent();
var __AdyenHelper: Object = {

    //service constants
    SERVICE: {
        PAYMENT: "AdyenPayment",
        PAYMENTDETAILS: "AdyenPaymentDetails",
        PAYMENT_3DSECURE: "AdyenPayment3DSecure",
        RECURRING: "AdyenRecurring",
        RECURRING_DISABLE: "AdyenRecurringDisable",
        PAYMENTMETHODS: "AdyenPaymentMethods",
        POSPAYMENT: "AdyenPosPayment",
        ORIGINKEYS: "AdyenOriginKeys",
        CHECKOUTPAYMENTMETHODS: "AdyenCheckoutPaymentMethods"
    },
    MODE: {
        TEST: "TEST",
        LIVE: "LIVE"
    },

    ADYEN_LIVE_URL: "https://live.adyen.com/",
    ADYEN_TEST_URL: "https://test.adyen.com/",
    LOADING_CONTEXT_TEST: "https://checkoutshopper-test.adyen.com/checkoutshopper/",
    LOADING_CONTEXT_LIVE: "https://checkoutshopper-live.adyen.com/checkoutshopper/",

    CHECKOUT_COMPONENT_VERSION: "4.6.0",
    VERSION: "19.2.3",

    getService: function (service: String): Object {
        // Create the service config (used for all services)
        var adyenService = null;

        try {
            var adyenService = dwsvc.LocalServiceRegistry.createService(service, {
                createRequest: function (svc: HTTPService, args) {
                    svc.setRequestMethod("POST");
                    if (args) {
                        return args;
                    } else {
                        return null;
                    }
                },
                parseResponse: function (svc: HTTPService, client: HTTPClient) {
                    return client;
                },
                filterLogMessage: function (msg: String){
                    return msg;
                }
            });
            dwsystem.Logger.getLogger("Adyen", "adyen").debug("Successfully retrive service with name {0}", service);

        } catch (e) {
            var ex = e;
            dwsystem.Logger.getLogger("Adyen", "adyen").error("Can't get service instance with name {0}", service);
            //e.message
        }
        return adyenService;
    },

    getAdyenMode: function (): String {
        var returnValue: String = "";
        if (!empty(adyenCurrentSite) && !empty(adyenCurrentSite.getCustomPreferenceValue('Adyen_Mode'))) {
            returnValue = adyenCurrentSite.getCustomPreferenceValue('Adyen_Mode').value;
        }
        return returnValue;
    },

    getAdyenMerchantAccount: function (): String {
        var returnValue: String = "";
        if (!empty(adyenCurrentSite) && !empty(adyenCurrentSite.getCustomPreferenceValue('Adyen_merchantCode'))) {
            returnValue = adyenCurrentSite.getCustomPreferenceValue('Adyen_merchantCode');
        }
        return returnValue;
    },

    getAdyenUrl: function (): String {
        var returnValue: String = "";
        switch (__AdyenHelper.getAdyenMode()) {
            case __AdyenHelper.MODE.TEST:
                returnValue = __AdyenHelper.ADYEN_TEST_URL;
                break;
            case __AdyenHelper.MODE.LIVE:
                returnValue = __AdyenHelper.ADYEN_LIVE_URL;
                break;
        }
        return returnValue;
    },

    getAdyenSecuredFieldsEnabled: function (): Boolean {
        var returnValue: Boolean = false;
        if (!empty(adyenCurrentSite) && !empty(adyenCurrentSite.getCustomPreferenceValue('AdyenSecuredFieldsEnabled'))) {
            returnValue = adyenCurrentSite.getCustomPreferenceValue('AdyenSecuredFieldsEnabled');
        }
        return returnValue;
    },

    getAdyen3DS2Enabled: function (): Boolean {
        var returnValue: Boolean = false;
        if (!empty(adyenCurrentSite) && !empty(adyenCurrentSite.getCustomPreferenceValue('Adyen3DS2Enabled'))) {
            returnValue = adyenCurrentSite.getCustomPreferenceValue('Adyen3DS2Enabled');
        }
        return returnValue;
    },

    getAdyenRecurringPaymentsEnabled: function (): Boolean {
        var returnValue: Boolean = false;
        if (!empty(adyenCurrentSite) && (adyenCurrentSite.getCustomPreferenceValue('AdyenRecurringEnabled') || adyenCurrentSite.getCustomPreferenceValue('AdyenOneClickEnabled'))) {
            returnValue = true;
        }
        return returnValue;
    },

    getAdyenRecurringEnabled: function (): String {
        var returnValue: String = "";
        if (!empty(adyenCurrentSite) && !empty(adyenCurrentSite.getCustomPreferenceValue('AdyenRecurringEnabled'))) {
            returnValue = adyenCurrentSite.getCustomPreferenceValue('AdyenRecurringEnabled');
        }
        return returnValue;
    },

    getAdyenOneClickEnabled: function (): String {
        var returnValue: String = "";
        if (!empty(adyenCurrentSite) && !empty(adyenCurrentSite.getCustomPreferenceValue('AdyenOneClickEnabled'))) {
            returnValue = adyenCurrentSite.getCustomPreferenceValue('AdyenOneClickEnabled');
        }
        return returnValue;
    },

    getAdyenPOIID: function (): String {
        var returnValue: String = "";
        if (!empty(adyenCurrentSite) && !empty(adyenCurrentSite.getCustomPreferenceValue('Adyen_POIID'))) {
            returnValue = adyenCurrentSite.getCustomPreferenceValue('Adyen_POIID');
        }
        return returnValue;
    },

    getAdyenApiKey: function (): String {
        var returnValue: String = "";
        if (!empty(adyenCurrentSite) && !empty(adyenCurrentSite.getCustomPreferenceValue('Adyen_API_Key'))) {
            returnValue = adyenCurrentSite.getCustomPreferenceValue('Adyen_API_Key');
        }
        return returnValue;
    },

    getCheckoutUrl: function (): String {
        var checkoutUrl = this.getLoadingContext() + "sdk/" + __AdyenHelper.CHECKOUT_COMPONENT_VERSION + "/adyen.js";
        return checkoutUrl;
    },

    getCheckoutCSS: function (): String {
        var checkoutCSS = this.getLoadingContext() + "sdk/" + __AdyenHelper.CHECKOUT_COMPONENT_VERSION + "/adyen.css";
        return checkoutCSS;
    },

    getLoadingContext: function (): String {
        var returnValue: String = "";
        switch (__AdyenHelper.getAdyenMode()) {
            case __AdyenHelper.MODE.TEST:
                returnValue = __AdyenHelper.LOADING_CONTEXT_TEST;
                break;
            case __AdyenHelper.MODE.LIVE:
                returnValue = __AdyenHelper.LOADING_CONTEXT_LIVE;
                break;
        }
        return returnValue;
    },

    getAdyenHash: function(value, salt){
        var data = value + salt;
        var signature = dw.crypto.Encoding.toHex(new dw.crypto.MessageDigest(dw.crypto.MessageDigest.DIGEST_SHA_512).digestBytes(new dw.util.Bytes(data))); 
        return signature;
    },

    getAdyenBasketFieldsEnabled: function(){
        var returnValue: String = "";
        if (!empty(adyenCurrentSite) && !empty(adyenCurrentSite.getCustomPreferenceValue('AdyenBasketFieldsEnabled'))) {
            returnValue = adyenCurrentSite.getCustomPreferenceValue('AdyenBasketFieldsEnabled');
        }
        return returnValue;
    },

    hasCheckoutComponent: function (paymentMethod) {
        if (paymentMethod.indexOf("ideal") > -1 ||
            paymentMethod.indexOf("klarna") > -1 ||
            paymentMethod.indexOf("afterpay") > -1
        ) {
            return true;
        }
        return false;
    },

    /**
     * In the open invoice components we need to validate only the personal details and only the
     * dateOfBirth, telephoneNumber and gender if it's set in the admin
     * @param details
     * @returns {Array}
     */
    filterOutOpenInvoiceComponentDetails: function (details) {
        var methodDetailsObj = JSON.parse(details);

        var filteredDetails = methodDetailsObj.details.map(function (parentDetail) {
            if (parentDetail.key == "personalDetails") {
                var detailObject = parentDetail.details.map(function (detail) {
                    if (detail.key == 'dateOfBirth' ||
                        detail.key == 'gender') {
                        return detail;
                    }
                });

                if (!!detailObject) {
                    return {
                        "key": parentDetail.key,
                        "type": parentDetail.type,
                        "details": __AdyenHelper.filterUndefinedItemsInArray(detailObject)
                    };
                }
            }
        });

        methodDetailsObj = __AdyenHelper.filterUndefinedItemsInArray(filteredDetails);
        return JSON.stringify(methodDetailsObj);
    },
    /**
     * Helper function to filter out the undefined items from an array
     * @param arr
     * @returns {*}
     */
    filterUndefinedItemsInArray: function (arr) {
        return arr.filter(function (item) {
            return typeof item !== 'undefined';
        });
    },

    getRatePayID: function (): String {

        var returnValue: String = "";
        if (!empty(adyenCurrentSite) && !empty(adyenCurrentSite.getCustomPreferenceValue('AdyenRatePayID'))) {
            returnValue = adyenCurrentSite.getCustomPreferenceValue('AdyenRatePayID');
        }
        if (!session.privacy.ratePayFingerprint || session.privacy.ratePayFingerprint == null) {
            var sessionID = dw.crypto.Encoding.toHex(new dw.crypto.WeakMessageDigest(dw.crypto.WeakMessageDigest.DIGEST_MD5).digestBytes(new dw.util.Bytes(session.sessionID)));
            session.privacy.ratePayFingerprint = sessionID;
        }
        return returnValue;
    },

    isOpenInvoiceMethod: function (paymentMethod) {
        if (paymentMethod.indexOf("afterpay") > -1 || paymentMethod.indexOf("klarna") > -1 || paymentMethod.indexOf("ratepay") > -1 || paymentMethod.indexOf("facilypay") > -1 || paymentMethod === "zip") {
            return true;
        }
        return false;
    },

    isMolpayMethod: function (paymentMethod) {
        if (paymentMethod.indexOf("molpay") > -1) {
            return true;
        }

        return false;
    },

    // Get saved card token of customer saved card based on matched cardUUID
    getCardToken: function (cardUUID, CustomerObj) {
        var token = '';
        if (!empty(CustomerObj) && CustomerObj.authenticated && !empty(cardUUID)) {
            var wallet = CustomerObj.getProfile().getWallet();
            var paymentInstruments = wallet.getPaymentInstruments(dw.order.PaymentInstrument.METHOD_CREDIT_CARD);
            var creditCardInstrument;
            var instrumentsIter = paymentInstruments.iterator();
            while (instrumentsIter.hasNext()) {
                creditCardInstrument = instrumentsIter.next();
                //find token ID exists for matching payment card
                if (creditCardInstrument.UUID.equals(cardUUID) && !empty(creditCardInstrument.getCreditCardToken())) {
                    token = creditCardInstrument.getCreditCardToken();
                    break;
                }
            }
        }
        return token;
    },

    createCardObjectSF: function (isOneClick, formType) {
        var card;
        var cardType = "scheme";
        var paymentMethodObject = {};
        switch (formType) {
            case 'billing':
                if (session.forms.billing.paymentMethods) {
                    card = session.forms.billing.paymentMethods.creditCard;
                    paymentMethodObject['holderName'] = card.owner.value;
                    if (card.type.value) {
                        cardType = card.type.value;
                    }
                } else {
                    // structure for SFRA
                    card = session.forms.billing.creditCardFields;
                    if (card.cardType.value && isOneClick) {
                        cardType = __AdyenHelper.getAdyenCardType(card.cardType.value);
                    }
                    paymentMethodObject['holderName'] = card.cardOwner.value;
                }
                break;
            case 'account':
                if (session.forms.billing.paymentMethods) {
                    card = session.forms.billing.paymentMethods.creditCard;
                    paymentMethodObject['holderName'] = card.owner.value;
                } else {
                    // structure for SFRA
                    card = session.forms.creditCard;
                    paymentMethodObject['holderName'] = card.cardOwner.value;
                }
                break;
        }

        if (card.adyenEncryptedSecurityCode.value) {
            paymentMethodObject['encryptedSecurityCode'] = card.adyenEncryptedSecurityCode.value;
        }

        paymentMethodObject['type'] = cardType;

        if (!isOneClick) {
            paymentMethodObject['encryptedCardNumber'] = card.adyenEncryptedCardNumber.value;
            paymentMethodObject['encryptedExpiryMonth'] = card.adyenEncryptedExpiryMonth.value;
            paymentMethodObject['encryptedExpiryYear'] = card.adyenEncryptedExpiryYear.value;
        }

        if (card.selectedBrand && card.selectedBrand.value) {
            paymentMethodObject['selectedBrand'] = card.selectedBrand.value;
        }

        return paymentMethodObject;
    },

    createShopperObject: function (params) {
        var shopperObject = {};

        var gender = "UNKNOWN";
        if(params.Args && params.Args.adyenForm) {
            if(params.Args.adyenForm.socialSecurityNumber.value){
                shopperObject['socialSecurityNumber'] = params.Args.adyenForm.socialSecurityNumber.value;
            }
            if(params.Args.adyenForm.dateOfBirth.value){
                shopperObject['dateOfBirth'] = params.Args.adyenForm.dateOfBirth.value;
            }
            if(params.Args.adyenForm.gender.value){
                switch(params.Args.adyenForm.gender.value){
                    case "M":
                        gender = "MALE";
                        break;
                    case "F":
                        gender = "FEMALE";
                        break;
                    default:
                        gender = "UNKNOWN";
                }
            }
            if(params.Args.adyenForm.telephoneNumber.value){
                shopperObject['telephoneNumber'] = params.Args.adyenForm.telephoneNumber.value;
            }
            else if(params.Args.Order.defaultShipment.shippingAddress.phone){
                shopperObject['telephoneNumber']= params.Args.Order.defaultShipment.shippingAddress.phone
            }

        }

        var customer = !empty(params) && 'Customer' in params && !empty(params.Customer) ? params.Customer : null;
        var order = !empty(params) && 'Order' in params && !empty(params.Order) ? params.Order : null;
        var profile = !empty(customer) && customer.registered && !empty(customer.getProfile()) ? customer.getProfile() : null;

        if(order) {
            if (customer) {
                customer = order.getCustomer();
            }
            if (order.customerEmail) {
                shopperObject['shopperEmail'] = order.customerEmail;
            }
            if (empty(order.customerEmail) && profile && profile.getEmail()) {
                shopperObject['shopperEmail'] = profile.getEmail();
            }

            var shopperDetails = {
                "firstName": order.getBillingAddress().firstName,
                "gender": this.getGender(gender, order),
                "infix": "",
                "lastName": order.getBillingAddress().lastName
            };

            shopperObject['shopperName'] = shopperDetails;
        }

        if (profile && profile.getCustomerNo()) {
            shopperObject['shopperReference'] = profile.getCustomerNo();
        } else {
            if (order && order.getCustomerNo()) {
                shopperObject['shopperReference'] = order.getCustomerNo();
            }
        }

        var shopperIP = !empty(request) && !empty(request.getHttpRemoteAddress()) ? request.getHttpRemoteAddress() : null;
        if (shopperIP) {
            shopperObject['shopperIP'] = shopperIP;
        }

        if(request.getLocale()){
            shopperObject['shopperLocale'] = request.getLocale();
        }

        return shopperObject;
    },

    createAddressObjects: function (order, paymentMethod, jsonObject) {
        var shippingAddress = order.defaultShipment.shippingAddress;
        jsonObject["countryCode"] = shippingAddress.countryCode.value.toUpperCase();

        var shippingStreet = "";
        var shippingHouseNumberOrName = "";

        if (!empty(shippingAddress.address1)) {
            shippingStreet = shippingAddress.address1;

            if (!empty(shippingAddress.address2)) {

                shippingHouseNumberOrName = shippingAddress.address2;

                if (paymentMethod.indexOf("afterpaytouch") > -1) {
                    shippingHouseNumberOrName = "";
                    shippingStreet += ' ' + shippingAddress.address2;
                }

            }

        } else {
            shippingStreet = 'N/A';
        }

        jsonObject.deliveryAddress = {
            "city": (!empty(shippingAddress.city) ? shippingAddress.city : "N/A"),
            "country": (!empty(shippingAddress.countryCode) ? shippingAddress.countryCode.value.toUpperCase() : "ZZ"),
            "houseNumberOrName": shippingHouseNumberOrName,
            "postalCode": (!empty(shippingAddress.postalCode) ? shippingAddress.postalCode : ""),
            "stateOrProvince": (!empty(shippingAddress.stateCode) ? shippingAddress.stateCode : "N/A"),
            "street": shippingStreet
        };

        var billingAddress = order.getBillingAddress();

        var billingStreet = "";
        var billingHouseNumberOrName = "";

        if (!empty(billingAddress.address1)) {
            billingStreet = billingAddress.address1;

            if (!empty(billingAddress.address2)) {

                billingHouseNumberOrName = billingAddress.address2;

                if (paymentMethod.indexOf("afterpaytouch") > -1) {
                    billingHouseNumberOrName = "";
                    billingStreet += ' ' + billingAddress.address2;
                }

            }

        } else {
            billingStreet = 'N/A';
        }


        jsonObject.billingAddress = {
            "city": (!empty(billingAddress.city) ? billingAddress.city : "N/A"),
            "country": (!empty(billingAddress.countryCode) ? billingAddress.countryCode.value.toUpperCase() : "ZZ"),
            "houseNumberOrName": billingHouseNumberOrName,
            "postalCode": (!empty(billingAddress.postalCode) ? billingAddress.postalCode : ""),
            "stateOrProvince": (!empty(billingAddress.stateCode) ? billingAddress.stateCode : "N/A"),
            "street": billingStreet
        };

        return jsonObject;
    },

    createAdyenRequestObject: function (order) {
        var jsonObject = {},
            reference = '';

        if (order && !empty(order.getOrderNo())) {
            reference = order.getOrderNo();
        } else {
            reference = 'recurringPayment-account';
        }

        jsonObject['merchantAccount'] = __AdyenHelper.getAdyenMerchantAccount();
        jsonObject['reference'] = reference;
        jsonObject['browserInfo'] = {
            'acceptHeader': request.httpHeaders.get('accept') + request.httpHeaders.get('accept-encoding'),
            'userAgent': request.httpUserAgent
        };

        jsonObject['applicationInfo'] = __AdyenHelper.getApplicationInfo();
        jsonObject['enableRecurring'] = __AdyenHelper.getAdyenRecurringEnabled();
        jsonObject['enableOneClick'] = __AdyenHelper.getAdyenOneClickEnabled();
        jsonObject['additionalData'] = {};

        return jsonObject;
    },

    createRecurringPaymentAccount: function (params) {
        var tokenID = '',
            pspReference = '';
        var formType = 'account';

        var jsonObject = __AdyenHelper.createAdyenRequestObject(null, true);

        if(__AdyenHelper.getAdyen3DS2Enabled()){
            jsonObject = __AdyenHelper.add3DS2Data(jsonObject, formType);
        }

        //Create credit card and enable OneClick
        var paymentMethodObject = __AdyenHelper.createCardObjectSF(false, formType);
        jsonObject['paymentMethod'] = paymentMethodObject;
        jsonObject['paymentMethod'].storeDetails = true;
        jsonObject['enableOneClick'] = true;


        var shopperObject = __AdyenHelper.createShopperObject({
            Customer: params.Customer
        });

        jsonObject['amount'] = {
            'currency': session.currency.currencyCode,
            'value': 0
        };

        var requestObject = __AdyenHelper.extend(jsonObject, shopperObject);

        //Send payment request to /payments endpoints
        var adyenCheckout = require('*/cartridge/scripts/adyenCheckout.ds');
        var createRecurringPaymentResult = adyenCheckout.doPaymentCall({}, requestObject);

        //Check the result of the initial recurring payment
        if (createRecurringPaymentResult === PIPELET_ERROR || createRecurringPaymentResult.Decision == 'ERROR') {
            return {
                error: true
            };
        }

        if (createRecurringPaymentResult.Decision == 'ACCEPT' && ('pspReference' in createRecurringPaymentResult) && !empty(createRecurringPaymentResult.pspReference)) {
            pspReference = createRecurringPaymentResult.pspReference;
            var GetRecurringDetailsList = require('*/cartridge/scripts/adyenGetRecurringDetailsList.ds');
            var getRecurringDetailsListResult = GetRecurringDetailsList.getRecurringDetailsList({
                Customer: params.Customer
            });

            if (getRecurringDetailsListResult === PIPELET_ERROR) {
                return {
                    error: true
                };
            }

            var paymentsMap = getRecurringDetailsListResult.RecurringPayments;
            if (paymentsMap != null && !paymentsMap.isEmpty() && paymentsMap.containsKey(pspReference)) {
                var details = !empty(paymentsMap.get(pspReference)) ? paymentsMap.get(pspReference) : null;
                tokenID = !empty(details) && ('recurringDetailReference' in details) && !empty(details.recurringDetailReference) ? details.recurringDetailReference : '';
            }

            return {
                ok: true,
                PspReference: pspReference,
                PaymentsMap: paymentsMap,
                TokenID: tokenID
            };
        }

        return {error: true};
    },

    add3DS2Data: function(jsonObject, formType){
        jsonObject.additionalData["allow3DS2"] = true;
        jsonObject["channel"] = "web";

        var card;
        switch (formType) {
            case 'billing':
                if (session.forms.billing.paymentMethods) {
                    card = session.forms.billing.paymentMethods.creditCard;
                } else {
                    // structure for SFRA
                    card = session.forms.billing.creditCardFields;
                }
                break;
            case 'account':
                if (session.forms.billing.paymentMethods) {
                    card = session.forms.billing.paymentMethods.creditCard;
                } else {
                    // structure for SFRA
                    card = session.forms.creditCard;
                }
                break;
        }

        jsonObject["browserInfo"] = JSON.parse(card.browserInfo.value);

        var origin = request.getHttpProtocol() + "://" + request.getHttpHost();

        jsonObject['origin'] = origin;
        jsonObject.threeDS2RequestData = {"notificationURL" : ""};

        return jsonObject;
    },

    /**
     * Checks if payment method is blocked
     */
    isMethodTypeBlocked : function(methodType) {
        var blockedMethods = ["bcmc", "bcmc_mobile_QR","scheme", "cup", "applepay", "wechatpay", "wechatpay_pos", "wechatpaySdk", "wechatpayQr"];
        return (blockedMethods.indexOf(methodType) !== -1);
    },

    extend: function (obj, src) {
        for (var key in src) {
            if (src.hasOwnProperty(key)) obj[key] = src[key];
        }
        return obj;
    },

    getAdyenCardType: function (cardType) {
        if (!empty(cardType)) {
            switch (cardType) {
                case 'Visa':
                    cardType = 'visa';
                    break;
                case 'Master':
                case 'MasterCard':
                case 'Mastercard':
                    cardType = 'mc';
                    break;
                case 'Amex':
                    cardType = 'amex';
                    break;
                case 'Discover':
                    cardType = 'discover';
                    break;
                case 'Maestro':
                    cardType = 'maestro';
                    break;
                case 'Diners':
                    cardType = 'diners';
                    break;
                case 'Bancontact':
                    cardType = 'bcmc';
                    break;
                case 'JCB':
                    cardType = 'jcb';
                    break;
                case 'CUP':
                    cardType = 'cup';
                    break;
                default:
                    cardType = cardType.toLowerCase();
                    break;
            }
        } else {
            throw new Error('cardType argument is not passed to getAdyenCardType function');
        }

        return cardType;
    },

    getSFCCCardType: function (cardType) {
        if (!empty(cardType)) {
            switch (cardType) {
                case 'visa':
                    cardType = 'Visa';
                    break;
                case 'mc':
                    cardType = 'Mastercard';
                    break;
                case 'amex':
                    cardType = 'Amex';
                    break;
                case 'discover':
                    cardType = 'Discover';
                    break;
                case 'maestro':
                case 'maestrouk':
                    cardType = 'Maestro';
                    break;
                case 'diners':
                    cardType = 'Diners';
                    break;
                case 'bcmc':
                    cardType = 'Bancontact';
                    break;
                case 'jcb':
                    cardType = 'JCB';
                    break;
                case 'cup':
                    cardType = 'CUP';
                    break;
                default:
                    cardType = '';
                    break;
            }
            return cardType;
        } else {
            throw new Error('cardType argument is not passed to getSFCCCardType function');
        }
    },

    savePaymentDetails: function (paymentInstrument, order, result) {
        if ('pspReference' in result && !empty(result.pspReference)) {
            paymentInstrument.paymentTransaction.transactionID = result.pspReference;
            order.custom.Adyen_pspReference = result.pspReference;
        }

        if ('resultCode' in result && !empty(result.resultCode)) {
            paymentInstrument.paymentTransaction.custom.authCode = result.resultCode;
        }

        if ('AdyenAmount' in result && !empty(result.AdyenAmount)) {
            order.custom.Adyen_value = result.AdyenAmount.toFixed(0);
        }

        if ('AdyenCardType' in result && !empty(result.AdyenCardType)) {
            order.custom.Adyen_paymentMethod = result.AdyenCardType;
        }

        if (!empty(result.fullResponse) && !empty(result.fullResponse.additionalData)) {
            paymentInstrument.paymentTransaction.custom.Adyen_additionalData = JSON.stringify(result.fullResponse.additionalData);
        }
        // Save full response to transaction custom attribute
        paymentInstrument.paymentTransaction.custom.Adyen_log = JSON.stringify(result);

        return true;
    },

    saveAuthResponseAttributes: function (transaction: dw.order.PaymentTransaction, map: dw.web.HttpParameterMap) {
        transaction.custom.Adyen_authResult = map.isParameterSubmitted('authResult') ? map.authResult.stringValue : '';
        transaction.custom.Adyen_merchantReference = map.isParameterSubmitted('merchantReference') ? map.merchantReference.stringValue : '';
        transaction.custom.Adyen_paymentMethod = map.isParameterSubmitted('paymentMethod') ? map.paymentMethod.stringValue : '';
        transaction.custom.Adyen_pspReference = map.isParameterSubmitted('pspReference') ? map.pspReference.stringValue : '';
        transaction.custom.Adyen_shopperLocale = map.isParameterSubmitted('shopperLocale') ? map.shopperLocale.stringValue : '';
        transaction.custom.Adyen_skinCode = map.isParameterSubmitted('skinCode') ? map.skinCode.stringValue : '';
        transaction.custom.Adyen_merchantSig = map.isParameterSubmitted('merchantSig') ? map.merchantSig.stringValue : '';
        transaction.custom.Adyen_merchantReturnData = map.isParameterSubmitted('merchantReturnData') ? map.merchantReturnData.stringValue : '';

    },

    getCurrencyValueForApi: function (amount): String {
        var currencyCode = dwutil.Currency.getCurrency(amount.currencyCode);
        var digitsNumber = __AdyenHelper.getFractionDigits(currencyCode.toString());
        return Math.round(amount.multiply(Math.pow(10, digitsNumber)).value);
    },

    getFractionDigits: function (currencyCode): Number {
        var format;
        switch (currencyCode) {
            case "CVE":
            case "DJF":
            case "GNF":
            case "IDR":
            case "JPY":
            case "KMF":
            case "KRW":
            case "PYG":
            case "RWF":
            case "UGX":
            case "VND":
            case "VUV":
            case "XAF":
            case "XOF":
            case "XPF":
                format = 0;
                break;
            case "BHD":
            case "IQD":
            case "JOD":
            case "KWD":
            case "LYD":
            case "OMR":
            case "TND":
                format = 3;
                break;
            default:
                format = 2;
                break;
        }
        return format;
    },

    getApplicationInfo: function () {

        var externalPlatformVersion = "";

        try {
            // AdyenController can be coming either from int_adyen_controllers or int_adyen_SFRA, depending on the cartridge path
            var AdyenController = require('*/cartridge/controllers/Adyen.js');
            externalPlatformVersion = AdyenController.getExternalPlatformVersion;
        } catch (e) {
        }

        var applicationInfo = {
            "adyenPaymentSource": {
                "name": "adyen-salesforce-commerce-cloud",
                "version": __AdyenHelper.VERSION
            },
            "externalPlatform": {
                "name": "SalesforceCommerceCloud",
                "version": externalPlatformVersion
            }
        };

        return applicationInfo;
    }
}

function pad(num) {
    if (num < 10) {
        return '0' + num;
    }
    return num;
}

module.exports = __AdyenHelper;