/**
 * save Adyen Notification
 * see page 22 of Adyen Integration manual
 *
 * v1 110324 : logging to file
 * v2 110325 :
 * v3 110408 : pass on OrderNo, Paymentresult for update
 * v4 130422 : Merged adyen_notify and update_order into single script  
 *
 * @input CurrentHttpParameterMap : Object
 *
 */
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.value);
importPackage( dw.order);
importPackage( dw.object );  

function execute( args : PipelineDictionary ) : Number
{
	return notifyHttpParameterMap(args.CurrentHttpParameterMap);
}

function notifyHttpParameterMap (hpm) {
    if (hpm == null) {
        var Logger = require('*/cartridge/scripts/models/LoggerModel');
        Logger.getLogger("Adyen", "adyen").fatal("Handling of Adyen notification has failed. No input parameters were provided.");
        return PIPELET_NEXT;
    }
    var notificationData = {};
    for each (var param in hpm.parameterNames) {
        notificationData[param] = hpm[param].stringValue;
    }

    return notify(notificationData);
}
function notify (notificationData) {
    var Logger = require('*/cartridge/scripts/models/LoggerModel');
    // Check the input parameters
    if (notificationData == null) {
        Logger.getLogger("Adyen", "adyen").fatal("Handling of Adyen notification has failed. No input parameters were provided.");
        return PIPELET_NEXT;
    }

    try {
        var msg : String = createLogMessage(notificationData);
        Logger.getLogger("Adyen").debug(msg);
        var calObj: Calendar = new Calendar();
        var keyValue: String = notificationData.merchantReference + "-" + StringUtils.formatCalendar(calObj, "yyyyMMddhhmmssSSS");
        var customObj: CustomObject = CustomObjectMgr.createCustomObject("adyenNotification", keyValue);
        for (var field in notificationData) {
            try {
                customObj.custom[field] = notificationData[field];
            }
            catch (e) {
            }
        }

        switch(notificationData.eventCode) {
            case "AUTHORISATION" :
                // Save all request to custom attribute for Authorization event
                customObj.custom.Adyen_log = JSON.stringify(notificationData);
            case "CANCELLATION" :
            case "CANCEL_OR_REFUND" :
            case "REFUND" :
            case "CAPTURE_FAILED" :
            case "ORDER_OPENED" :
            case "ORDER_CLOSED" :
            case "OFFER_CLOSED":
            case "PENDING" :
                customObj.custom.updateStatus = "PROCESS";
                Logger.getLogger("Adyen").info ("Received notification for merchantReference {0} with status {1}. Custom Object set up to 'PROCESS' status.", notificationData.merchantReference, notificationData.eventCode);
                break;
            default:
                customObj.custom.updateStatus = "PENDING";
                Logger.getLogger("Adyen").info ("Received notification for merchantReference {0} with status {1}. Custom Object set up to 'PENDING' status.", notificationData.merchantReference, notificationData.eventCode);
        }
        return {
            success: true
        };
    }
	catch (e){
        Logger.getLogger("Adyen", "adyen").error("Notification failed: " + JSON.stringify(notificationData) + "\n" + "Error message: " + e.message);
        return {
            success: false,
            errorMessage: e.message
        };
	}

}

function createLogMessage(notificationData){
	var VERSION : String= "4d";
	var msg = "";
	msg = "AdyenNotification v " + VERSION;
	msg = msg + "\n================================================================\n";
    msg = msg + "reason : " + notificationData.reason;
	msg = msg + "\neventDate : " + notificationData.eventDate;
	msg = msg + "\nmerchantReference : " + notificationData.merchantReference;
	msg = msg + "\ncurrency : " + notificationData.currency;
	msg = msg + "\npspReference : " + notificationData.pspReference;
	msg = msg + "\nmerchantAccountCode : " + notificationData.merchantAccountCode;
	msg = msg + "\neventCode : " + notificationData.eventCode;
	msg = msg + "\nvalue : " + notificationData.value;
	msg = msg + "\noperations : " + notificationData.operations;
	msg = msg + "\nsuccess : " + notificationData.success;
	msg = msg + "\npaymentMethod : " + notificationData.paymentMethod;
	msg = msg + "\nlive : " + notificationData.live;
	return msg;
}

module.exports = {
	'execute': execute,
	'notify': notify,
    'notifyHttpParameterMap': notifyHttpParameterMap
}
