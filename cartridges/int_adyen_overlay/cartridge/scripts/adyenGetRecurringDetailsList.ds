/**
* Gets recurring payment list from Adyen
*
* @input Customer : dw.customer.Customer
*
* @output RecurringPayments : dw.util.HashMap map of firstPspReference with card details
*/

/* API Includes */
var HashMap = require('dw/util/HashMap');
var Logger = require('*/cartridge/scripts/models/LoggerModel');

/* Script Modules */
var AdyenHelper = require('*/cartridge/scripts/util/AdyenHelper');
var THIS_SCRIPT = 'int_adyen_overlay/scripts/adyenGetRecurringDetailsList.ds';

function execute(args) {
    var result = getRecurringDetailsList(args);
    if (result == PIPELET_ERROR) {
        return PIPELET_ERROR;
    }
    return PIPELET_NEXT;
}

function getRecurringDetailsList(args) {
    var paymentsMap = new HashMap();
    args.RecurringPayments = paymentsMap;

    try {
        var requestObject = {},
            customer = !empty(args.Customer) ? args.Customer : null,
            profile = !empty(customer) && customer.registered && !empty(customer.getProfile()) ? customer.getProfile() : null,
            customerID = '';

        if (!empty(profile) && !empty(profile.getCustomerNo())) {
            customerID = profile.getCustomerNo();
        }

        if (empty(customerID)) {
            Logger.getLogger('Adyen').error(THIS_SCRIPT + ': No Customer ID');
            return PIPELET_ERROR;
        }

        requestObject['merchantAccount'] = AdyenHelper.getAdyenMerchantAccount();
        requestObject['shopperReference'] = customerID;
        requestObject['recurring'] = {"contract":"ONECLICK"};

        var callResult = null,
            resultObject = null,
            service = AdyenHelper.getService(AdyenHelper.SERVICE.RECURRING);

        if (service == null) {
            return PIPELET_ERROR;
        }

        var apiKey = AdyenHelper.getAdyenApiKey();
        service.addHeader('Content-type', 'application/json');
        service.addHeader('charset', 'UTF-8');
        service.addHeader('X-API-KEY', apiKey);
        callResult = service.call(JSON.stringify(requestObject));

        if (callResult.isOk() == false) {
            Logger.getLogger('Adyen').error(THIS_SCRIPT + ' Adyen: Call error code' +  callResult.getError().toString() + ' Error => ResponseStatus: ' + callResult.getStatus()  + ' | ResponseErrorText: ' +  callResult.getErrorMessage() + ' | ResponseText: ' + callResult.getMsg());
            return PIPELET_ERROR;
        }

        resultObject = ('object' in callResult ? callResult.object : null);

        var resultObj = {
            statusCode: resultObject.getStatusCode(),
            statusMessage: resultObject.getStatusMessage(),
            text: resultObject.getText(),
            errorText: resultObject.getErrorText(),
            timeout: resultObject.getTimeout()
        }

        var resultText = ('text' in resultObj && !empty(resultObj.text) ? resultObj.text : null);
        if (resultText == null) {
            return PIPELET_ERROR;
        }

        // build the response object
        var responseObj;
        try {
            responseObj = JSON.parse(resultText);
        } catch (ex) {
            Logger.getLogger('Adyen').error(THIS_SCRIPT + ' Adyen: error parsing response object ' + ex.message);
            return PIPELET_ERROR;
        }

        var paymentDetails;
        if (!empty(responseObj) && ('details' in responseObj) && responseObj.details.length > 0) {
            paymentDetails = responseObj.details;
            for (var i=0; i<paymentDetails.length; i++) {
                var details = 'RecurringDetail' in paymentDetails[i] ? paymentDetails[i].RecurringDetail : null;
                if (!empty(details)) {
                    var paymentObj = {};
                    paymentObj['recurringDetailReference'] = 'recurringDetailReference' in details && !empty(details.recurringDetailReference) ? details.recurringDetailReference : '';
                    paymentObj['cardExpiryMonth'] = ('card' in details) && ('expiryMonth' in details.card) && !empty(details.card.expiryMonth) ? details.card.expiryMonth : '';
                    paymentObj['cardExpiryYear'] = ('card' in details) && ('expiryYear' in details.card) && !empty(details.card.expiryYear) ? details.card.expiryYear : '';
                    paymentObj['cardLastFour'] = ('card' in details) && ('number' in details.card) && !empty(details.card.number) ? details.card.number : '';
                    paymentObj['cardType'] = 'variant' in details && !empty(details.variant) ? details.variant : '';
                    paymentObj['cardHolder'] = ('card' in details) && ('holderName' in details.card) && !empty(details.card.holderName) ? details.card.holderName : '';

                    paymentsMap.put(i, paymentObj);
                }

            }
        }

    } catch (e) {
        Logger.getLogger('Adyen').fatal('Adyen: ' + e.toString() + ' in ' + e.fileName + ':' + e.lineNumber);
        return PIPELET_ERROR;
    }

    args.RecurringPayments = paymentsMap;

    return args;
}

module.exports = {
    'execute': execute,
    'getRecurringDetailsList': getRecurringDetailsList
}